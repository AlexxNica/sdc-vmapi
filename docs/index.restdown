---
title: Zones API (ZAPI)
apisections: VMs, VM Metadata, Jobs, Changelog
markdown2extras: wiki-tables, code-friendly
---

# ZAPI

* Repository: git clone git@git.joyent.com:zapi.git
* Browsing: <https://mo.joyent.com/zapi>
* Docs: <https://mo.joyent.com/docs/zapi>
* Who: Andres Rodriguez
* Tickets/bugs: <https://devhub.joyent.com/jira/browse/ZAPI>

# Introduction to Zones API

## What is ZAPI?

Zones API allows clients to get information about VMs on a datacenter by using an HTTP API. ZAPI offers the following features:

 * Search VMs by specific criteria such as ram, owner, tags, server, dataset, etc.
 * Get information about a single VM
 * Create new VMs
 * Perform actions on an existing VM such as start, stop, reboot and resize
 * Update VMs
 * Destroy VMs

## Design & Requirements

* Node.js restify HTTP server
* UFDS is the remote datastore for ZAPI. ZAPI does not have persistency and all zones data living on UFDS should be considered a cache
* A heartbeater AMQP client listens for zone heartbeats so ZAPI can return state information for zones
* ZAPI is only concerned for exposing zones information to users the same way CNAPI does for compute nodes
* There is one ZAPI instance per datacenter
* ZAPI is stateless: when any VM action is called (create, destroy, reboot, etc) the message is passed through a workflow API instance that takes care of it
* ZAPI should be as dumb as possible. Contrary to MAPI, ZAPI does not have complicated logic that prevents users to call actions on zones (and even creating zones). Much of the required logic for this is moved to the corresponding workflow and other participant APIs


# Getting Started

You can set your own local install of ZAPI assuming you are also running a local (or remote if accessible) COAL instance with the master branch of UFDS:

    # Get the source and build.
    git clone git@git.joyent.com:zapi.git
    cd zapi/
    make all

    # Setup config.
    # Note that there is a dependency on a headnode instance with a running UFDS
    cp config.mac.json config.json
    vi config.json

    # node server.js


# VM Response Object

The VM response object is going a single representation for the two available VM GET actions. GET /vms will return a collection of VM objects and GET /vms/<uuid> will return a single VM object. This object will conform to the attributes shown below as they reflect the same VM attributes found when issuing a `vmadm get <uuid>` command from the command line interface on a SDC compute node. Note that vmadm returns more attributes that might not be relevant at the HTTP API layer.

    {
      "uuid": "ef375f03-57ca-44a9-bc8d-63aec09fbc37",
      "brand": "joyent",
      "dataset_uuid": "01b2c898-945f-11e1-a523-af1afbe22822",
      "server_uuid": "564d6836-ed2e-18f8-bdf2-e900490a57a1",
      "alias": "assets1",
      "ram": 64,
      "max_physical_memory": 64,
      "max_swap": 256,
      "quota": 10240,
      "cpu_cap": 100,
      "cpu_shares": 1,
      "max_lwps": 1000,
      "create_timestamp": "2012-05-16T23:33:09.809Z",
      "destroyed": "",
      "last_modified": "2012-05-16T23:33:12.000Z",
      "zone_state": "running",
      "state": "running",
      "zpool": "zones",
      "zfs_io_priority": 10,
      "owner_uuid": "930896af-bf8c-48d4-885c-6573a94b1853",
      "nics": [
        {
          "interface": "net0",
          "mac": "90:b8:d0:d6:26:6e",
          "vlan_id": 0,
          "nic_tag": "admin",
          "ip": "10.99.99.192",
          "netmask": "255.255.255.0",
          "gateway": "10.99.99.7",
          "primary": true
        }
      ],
      "customer_metadata": {
        "host-ip": "10.99.99.9"
      },
      "internal_metadata": {
          "throttle": true
      },
      "tags": {
        "smartdc_role": "assets",
        "smartdc_type": "core"
      }
    }


# VM Job Response Object

Any action called on the VMs or Metadata endpoints will result on a new Job being created on the backend. Performing an action on VM doens't imply that changes are going to be reflected immediately, so a Job response object will provide the user with the necessary info to get more details about progress of the task that has been queued. The user can poll the GET /jobs/<uuid> endpoint for more details and also GET /vms/<uuid> to see if the VM properties have changed after the job completes.

    {
      "vm_uuid": "ef375f03-57ca-44a9-bc8d-63aec09fbc37",
      "job_uuid": "6ad3a288-31cf-44e0-8d18-9b3f2a031067"
    }


# Error Response Object

Error responses will be returned when the response status code is one of 40X errors including 404. These responses will have an error code and a message:

    {
      "code": "ResourceNotFound",
      "message": "Route does not exist"
    }


# VMs

The Vms endpoint let us get information about VMs living on a SDC install, there is only one ZAPI instance per datacenter. ZAPI acts as an HTTP interface to VM data stored UFDS. ZAPI is used when need to obtain information about particular VMs or when we need perform actions on them such as start, reboot, resize, etc.

## ListVms (GET /vms)

Returns a list of VMs according the specified search filter.

### Inputs

All inputs are optional.

||owner_uuid||UUID||VM Owner||
||type||String||'vm' or 'zone'||
||alias||String||VM Alias||
||state||String||running, stopped, active or destroyed||
||ram||Number||Amount of memory of the VM||
||tag.key||String||VM tags, see below||

## Tags

VMs can also be searched by tags. Tags are key/value pairs that let us identify a vm by client-specific criteria. If a VM is tagged as 'role=master', then the search filter to be added to the request params should be 'tag.role=master'. When a tag value is '*', the search is performed for VMs that are tagged with any value of the specified key. Any number of tags can be specified. See the examples section for sample searches of VMs by tags.

### Responses

||**Code**||**Description**||**Response**||
||200||||Array of VM objects||

### Examples

    GET /vms
    GET /vms?alias=my-vm
    GET /vms?state=running
    GET /vms?tag.role=sdc
    GET /vms?tag.role=sdc&tag.type=database
    GET /vms?tag.role=*


## GetVm (GET /vms/:uuid)

Returns a VM with the specified UUID. When sync=true is passed, ZAPI will directly load VM details with a synchronous call to CNAPI. This will also refresh the VMs cache so that if a VM was already destroyed and it doesn't appear to be, it will be marked as such in the process. Using the sync version of this action can be seen as 'force ZAPI' to load the VM information directly from CNAPI.

### Inputs

||**Param**||**Type**||**Description**||**Required?**||
||uuid||UUID||VM UUID||Yes||
||owner_uuid||UUID||VM Owner||No||
||sync||Boolean||Load VM info from CNAPI||No||

### Responses

||**Code**||**Description**||**Response**||
||200||||VM object||
||404||VM not found||Error object||

### Example

    GET /vms/00956725-4689-4e2c-9d25-f2172f496f9c


## CreateVm (POST /vms)

Queues a VM provision. This will validate all parameters and create a new job on workflow API when the request is considered to be valid. The response is
the same as a GET to /vms/:uuid, however some VM attributes might not be present since it has not been provisioned yet. The response also contains a Job-Location header which can be used to get more information about the provisioning job that is being executed by workflow API.

### Required Inputs

||owner_uuid||UUID||VM Owner||
||dataset_uuid||UUID||Dataset UUID. Required if dataset_url is not present||
||dataset_url||URL||Dataset URL. Required if dataset_uuid is not present||
||brand||String||'joyent' or 'kvm'||
||ram||Number||VM RAM||

### Optional Inputs

||server_uuid||UUID||Manually specify a server for the provision||
||alias||String||VM alias||
||networks||String/Array||Comma separated network UUIDs or array of UUIDs if application/json||
||max_physical_memory||Number||Same as RAM||
||max_swap||Number||Defaults to 2 x RAM if not specified||
||zfs_io_priority||Number||ZFS IO Priority||
||cpu_cap||Number||CPU Cap||
||max_lwps||Number||Max. Lightweight Processes||
||quota||Number||VM quota||
||tags||Object||VM tags||
||customer_metadata||Object||VM metadata||
||internal_metadata||Object||VM metadata||

### Response Codes

||**Code**||**Description**||**Response**||
||201||New job created||VM object||
||409||Missing parameter||Error object||
||409||Invalid parameter||Error object||

### Example

    POST /vms
      -d owner_uuid=930896af-bf8c-48d4-885c-6573a94b1853 \
      -d dataset_uuid=28445220-6eac-11e1-9ce8-5f14ed22e782 \
      -d brand=joyent \
      -d ram=128


## UpdateVm (POST /vms/:uuid)

Queues an update operation on a VM. Only four operations are supported at this moment: **start, stop, reboot and update**. Update is the only action that takes additional arguments.

### Inputs

||**Param**||**Type**||**Description**||**Required?**||
||uuid||UUID||VM UUID||Yes||
||owner_uuid||UUID||VM Owner||No||
||action||String||start, stop, reboot or update||Yes||

### VM Update Inputs

At least one of the following parameters must be provided when action=update.

||alias||String||VM alias||
||owner_uuid||UUID||VM Owner||
||ram||Number||VM RAM||
||max_physical_memory||Number||Same as RAM||
||max_swap||Number||Defaults to 2 x RAM if not specified||
||zfs_io_priority||Number||ZFS IO Priority||
||cpu_cap||Number||CPU Cap||
||max_lwps||Number||Max. Lightweight Processes||
||quota||Number||VM quota (disk)||
||tags||Object||VM tags||
||customer_metadata||Object||VM metadata||
||internal_metadata||Object||VM metadata||

### Response Codes

||**Code**||**Description**||**Response**||
||200||||VM object||
||404||VM not found||Error object||
||409||Missing parameter||Error object||
||409||Invalid parameter||Error object||

### Example

    POST /vms/e9bd0ed1-7de3-4c66-a649-d675dbce6e83 \
      -d action=stop

    POST /vms/e9bd0ed1-7de3-4c66-a649-d675dbce6e83 \
      -d action=update \
      -d alias=new-alias \
      -d quota=20


## DeleteVm (DELETE /vms/:uuid)

Deletes a VM. The VM will be physically destroyed and it will be marked as destroyed on UFDS when the operation is completed. When sync=true is passed, ZAPI will wait on the workflow API's job to complete before returning and the zone will be marked as destroyed in the process. This is an experimental feature for clients that need to wait until the DELETE has actually destroyed the VM physically before continuing.

### Inputs

||**Param**||**Type**||**Description**||**Required?**||
||uuid||UUID||VM UUID||Yes||
||owner_uuid||UUID||VM Owner||No||
||sync||Boolean||Sync delete||No||

### Responses

||**Code**||**Description**||**Response**||
||200||||VM object||
||404||VM not found||Error object||

### Example

    POST /vms/e9bd0ed1-7de3-4c66-a649-d675dbce6e83 -X DELETE


# VM Metadata

There are three kinds of metadata a VM can store: customer_metadata, internal_metadata and tags. A metadata object is any valid set of key/value pairs that can be properly encoded to JSON. Values must be strings, numbers or booleans. Examples:

    {
      "ip": "10.99.99.9",
      "boolean": true,
      "string": "foobar",
      "number": 42
    }

VM Tags allow VMs to be grouped by any criteria. Tags are key/value pairs that can be assigned to any VM. For example, VMs can be grouped by tagging them as a database role with a tag such as '{ role: "database" }'.

Customer and internal metadata are used to store relevant information to the VM, such as IP addresses of dependent VMs or initialization scripts that run when the VM is being setup.

The following API endpoints are equivalent for tags, customer_metadata and internal_metadata since all three metadata types share the same representation.


## ListMetadata (GET /vms/:uuid/(tags|customer_metadata|internal_metadata))

Returns metadata assigned to a VM.

### Inputs

||**Param**||**Type**||**Description**||**Required?**||
||uuid||UUID||VM UUID||Yes||
||owner_uuid||UUID||VM Owner||No||

### Responses

||**Code**||**Description**||**Response**||
||200||||Metadata object||
||404||VM not found||Error object||

### Example

    GET /vms/da0dfac1-341e-4e51-b357-99f7355f1008/tags

    {
      "role": "dns",
      "customer": "tracy"
    }


## GetMetadata (GET /vms/:uuid/(tags|customer_metadata|internal_metadata)/:key)

Returns the value of a metadata key.

### Inputs

||**Param**||**Type**||**Description**||**Required?**||
||uuid||UUID||VM UUID||Yes||
||owner_uuid||UUID||VM Owner||No||
||key||String||Metadata Key||Yes||

### Responses

||**Code**||**Description**||**Response**||
||200||||String value of the metadata key||
||404||VM not found||Error object||

### Example

    GET /vms/da0dfac1-341e-4e51-b357-99f7355f1008/tags/role

    dns


## AddMetadata (POST /vms/:uuid/(tags|customer_metadata|internal_metadata))

Adds a new metadata to a VM. Keep in mind that metadata gets appended, not overwritten.

### Inputs

||**Param**||**Type**||**Description**||**Required?**||
||uuid||UUID||VM UUID||Yes||
||owner_uuid||UUID||VM Owner||No||
||metadata||key-value/object||Metadata||Yes||

### Responses

||**Code**||**Description**||**Response**||
||200||||Metadata object||
||404||VM not found||Error object||

### Example

    POST /vms/da0dfac1-341e-4e51-b357-99f7355f1008/tags
      -d customer=tracy

    {
      "customer": "tracy"
    }


## DeleteMetadata (DELETE /vms/:uuid/(tags|customer_metadata|internal_metadata)/:key)

Deletes a metadata key from a VM.

### Inputs

||**Param**||**Type**||**Description**||**Required?**||
||uuid||UUID||VM UUID||Yes||
||owner_uuid||UUID||VM Owner||No||
||key||String||Metadata Key||Yes||

### Responses

||**Code**||**Description**||**Response**||
||204||Request accepted||||
||404||VM not found||Error object||

### Example

    DELETE /vms/da0dfac1-341e-4e51-b357-99f7355f1008/tags/role


## DeleteAllMetadata (DELETE /vms/:uuid/(tags|customer_metadata|internal_metadata))

Deletes all metadata keys from a VM.

### Inputs

||**Param**||**Type**||**Description**||**Required?**||
||uuid||UUID||VM UUID||Yes||
||owner_uuid||UUID||VM Owner||No||

### Responses

||**Code**||**Description**||**Response**||
||204||Request accepted||||
||404||VM not found||Error object||

### Example

    DELETE /vms/da0dfac1-341e-4e51-b357-99f7355f1008/tags


# Jobs

Jobs are created when an operation needs to be performed on a VM. Examples of jobs that can be created are VM lifecycle tasks such as start and reboot. Provision jobs are created from calling "POST /vms".

## GetJob (GET /jobs/:uuid)

Returns a job with the specified UUID.

### Inputs

||**Param**||**Type**||**Description**||**Required?**||
||uuid||UUID||Job UUID||Yes||

### Example

    GET /jobs/6ad3a288-31cf-44e0-8d18-9b3f2a031067

    {
      "name": "provision-4e4ff04b-5cc4-437e-92da-2403a634e74f",
      "uuid": "6ad3a288-31cf-44e0-8d18-9b3f2a031067",
      "execution": "succeeded",
      "params": {
        "owner_uuid": "930896af-bf8c-48d4-885c-6573a94b1853",
        "dataset_uuid": "28445220-6eac-11e1-9ce8-5f14ed22e782",
        "brand": "joyent",
        "ram": "128",
        "zonename": "e9bd0ed1-7de3-4c66-a649-d675dbce6e83",
        "ufdsUrl": "ldaps://10.88.88.50:636",
        "ufdsDn": "cn=root",
        "ufdsPassword": "secret",
        "dapiUrl": "http://10.99.99.24",
        "dapiUsername": "admin",
        "dapiPassword": "z3cr3t",
        "cnapiUrl": "http://10.99.99.23",
        "uuid": "e9bd0ed1-7de3-4c66-a649-d675dbce6e83",
        "server_uuid": "564da914-5047-48f0-ba5e-26761097330a",
        "task": {
          "id": "70129767",
          "progress": 100,
          "status": "complete"
        }
      },
      "info": null,
      "exec_after": "2012-04-13T18:17:15.194Z",
      "created_at": "2012-04-13T18:17:15.198Z",
      "timeout": 180,
      "chain_results": [
        {
          "result": "All parameters OK!",
          "error": "",
          "started_at": "2012-04-13T18:17:17.512Z",
          "finished_at": "2012-04-13T18:17:18.619Z"
        },
        {
          "result": "Got servers!",
          "error": "",
          "started_at": "2012-04-13T18:17:18.628Z",
          "finished_at": "2012-04-13T18:17:21.737Z"
        },
        {
          "result": "Server allocated!",
          "error": "",
          "started_at": "2012-04-13T18:17:21.743Z",
          "finished_at": "2012-04-13T18:17:23.137Z"
        },
        {
          "result": "Provision succeeded!",
          "error": "",
          "started_at": "2012-04-13T18:17:23.197Z",
          "finished_at": "2012-04-13T18:18:42.726Z"
        }
      ]
    }


# Changelog

## 2012-06-05

  * When creating a new VM you can now pass dataset_url
  * When creating a new VM you can now pass server_uuid

## 2012-06-04

  * VM actions now return a Job Response Object

## 2012-06-01

  * VM API endpoints are now named /vms instead of /machines
  * /machines is still aliased but deprecated

## 2012-05-28

  * Search VMs by tags

## 2012-05-23

  * 'networks' is a required parameter for POST /vms
  * Add sync=true parameter to GET /vms/uuid

## 2012-05-22

  * Add sync=true parameter to DELETE /vms/uuid