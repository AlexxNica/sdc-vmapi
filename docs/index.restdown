---
title: VMs API (VMAPI)
apisections: Ping, VMs, VM Snapshots, VM Metadata, Jobs, Changelog
markdown2extras: wiki-tables, code-friendly
---

# VMAPI

* Repository: git clone git@git.joyent.com:vmapi.git
* Browsing: <https://mo.joyent.com/vmapi>
* Docs: <https://mo.joyent.com/docs/vmapi>
* Who: Andres Rodriguez
* Tickets/bugs: <https://devhub.joyent.com/jira/browse/VMAPI>

# Introduction to VMs API

## What is VMAPI?

VMs API allows clients to get information about VMs on a datacenter by using an HTTP API. VMAPI offers the following features:

 * Search VMs by specific criteria such as ram, owner, tags, server, image, etc.
 * Get information about a single VM
 * Create new VMs
 * Perform actions on an existing VM such as start, stop, reboot and resize
 * List jobs that have been created for VMs
 * Update VMs
 * Destroy VMs
 * Manage VM metadata

## Design & Requirements

* Node.js restify HTTP server
* UFDS is the remote datastore for VMAPI. VMAPI does not have persistency and VM data living on UFDS should be considered a cache
* A heartbeater AMQP client listens for VM heartbeats so VMAPI can return state information for zones
* VMAPI is only concerned for exposing VMs information to users the same way CNAPI does for compute nodes
* There is one VMAPI instance per datacenter
* VMAPI is stateless: when any VM action is called (create, destroy, reboot, etc) the message is passed through a workflow API instance that takes care of it
* VMAPI should be as dumb as possible. Contrary to MAPI, VMAPI does not have complicated logic that prevents users to call actions on VMs (and even creating VMs). Much of the required logic for this is moved to the corresponding workflow and other participant APIs


# Getting Started

You can set your own local install of VMAPI assuming you are also running a local (or remote if accessible) COAL instance with the master branch of UFDS:

    # Get the source and build.
    git clone git@git.joyent.com:vmapi.git
    cd vmapi/
    make all

    # Setup config.
    # Note that there is a dependency on a headnode instance with a running UFDS
    cp config.mac.json config.json
    vi config.json

    # node server.js


# VM Response Object

The VM response object is going a single representation for the two available VM GET actions. GET /vms will return a collection of VM objects and GET /vms/<uuid> will return a single VM object. This object will conform to the attributes shown below as they reflect the same VM attributes found when issuing a `vmadm get <uuid>` command from the command line interface on a SDC compute node. Note that vmadm returns more attributes that might not be relevant at the HTTP API layer.

    {
      "uuid": "ef375f03-57ca-44a9-bc8d-63aec09fbc37",
      "brand": "joyent",
      "dataset_uuid": "01b2c898-945f-11e1-a523-af1afbe22822",
      "image_uuid": "01b2c898-945f-11e1-a523-af1afbe22822",
      "server_uuid": "564d6836-ed2e-18f8-bdf2-e900490a57a1",
      "alias": "assets1",
      "ram": 64,
      "max_physical_memory": 64,
      "max_swap": 256,
      "quota": 10240,
      "cpu_cap": 100,
      "cpu_shares": 1,
      "max_lwps": 1000,
      "create_timestamp": "2012-05-16T23:33:09.809Z",
      "destroyed": "",
      "last_modified": "2012-05-16T23:33:12.000Z",
      "zone_state": "running",
      "state": "running",
      "zpool": "zones",
      "zfs_io_priority": 10,
      "owner_uuid": "930896af-bf8c-48d4-885c-6573a94b1853",
      "nics": [
        {
          "interface": "net0",
          "mac": "90:b8:d0:d6:26:6e",
          "vlan_id": 0,
          "nic_tag": "admin",
          "ip": "10.99.99.192",
          "netmask": "255.255.255.0",
          "gateway": "10.99.99.7",
          "primary": true
        }
      ],
      "customer_metadata": {
        "host-ip": "10.99.99.9"
      },
      "internal_metadata": {
          "throttle": true
      },
      "tags": {
        "smartdc_role": "assets",
        "smartdc_type": "core"
      },
      "snapshots": [
        {
          "name": "zones/ef375f03-57ca-44a9-bc8d-63aec09fbc37@backup"
        }
      ],
    }

There is only one situation when the API can return an 'augmented' VM object and this is when we are requesting a KVM VM (brand == kvm) object. In this case the response JSON in question will have three additional attributes: cpu_type, vcpus and disks. The following example illustrates a sample KVM VM response object:

    {
      "uuid": "03750e6a-fcf6-4755-85b5-22b8ddf0f1fb",
      "brand": "kvm",
      "image_uuid": "56108678-1183-11e1-83c3-ff3185a5b47f",
      "server_uuid": "564d47c4-b845-113b-664f-2a1d85d0020c",
      "billing_id": "00000000-0000-0000-0000-000000000000",
      "package_name": null,
      "package_version": null,
      "alias": null,
      "ram": 256,
      "max_physical_memory": 512,
      "max_swap": 512,
      "quota": null,
      "cpu_cap": null,
      "cpu_shares": 2,
      "max_lwps": 2000,
      "create_timestamp": "2012-12-21T06:55:27.654Z",
      "destroyed": null,
      "last_modified": "2012-12-21T06:55:32.000Z",
      "zone_state": "running",
      "state": "running",
      "zpool": null,
      "zfs_io_priority": 100,
      "owner_uuid": "00000000-0000-0000-0000-000000000000",
      "nics": [
        {
          "interface": "net0",
          "mac": "90:b8:d0:88:45:a8",
          "vlan_id": 0,
          "nic_tag": "admin",
          "gateway": "10.99.99.7",
          "primary": true,
          "ip": "10.99.99.32",
          "netmask": "255.255.255.0",
          "model": "virtio"
        }
      ],
      "snapshots": [],
      "customer_metadata": {},
      "internal_metadata": {},
      "tags": {},
      "vcpus": 1,
      "cpu_type": "host",
      "disks": [
        {
          "path": "/dev/zvol/rdsk/zones/03750e6a-fcf6-4755-85b5-22b8ddf0f1fb-disk0",
          "boot": false,
          "model": "virtio",
          "media": "disk",
          "image_size": 10240,
          "image_uuid": "56108678-1183-11e1-83c3-ff3185a5b47f",
          "image_name": "ubuntu10.04",
          "zfs_filesystem": "zones/03750e6a-fcf6-4755-85b5-22b8ddf0f1fb-disk0",
          "zpool": "zones",
          "size": 5120,
          "compression": "off",
          "block_size": 8192
        },
        {
          "path": "/dev/zvol/rdsk/zones/03750e6a-fcf6-4755-85b5-22b8ddf0f1fb-disk1",
          "boot": false,
          "model": "virtio",
          "media": "disk",
          "size": 10240,
          "zfs_filesystem": "zones/03750e6a-fcf6-4755-85b5-22b8ddf0f1fb-disk1",
          "zpool": "zones",
          "compression": "off",
          "block_size": 8192
        }
      ]
    }

## VM States

The VM response object contains a state attribute that should be used as the high level representation of the machine state. There are three 'running state' values for a VM, two 'provisioning state' values and an additional 'active' state that is only available as a search filter when used in the ListVms API endpoint:

|| **VM State** || **Description** ||
|| running || Self-explanatory ||
|| stopped || Self-explanatory ||
|| destroyed || Self-explanatory||
|| provisioning || VM is currently being provisioned in the system ||
|| failed || VM provisioning has failed ||
|| active || When used in ListVms, denotes machines that are not destroyed ||

In addition, there is a 'zone_state' property that represents the Solaris Zones state, since every VM is really a zone internally. The state property should be used in favor of zone_state at all times, but zone_state is provided in case it's needed for debugging purposes. The following is a table that shows all the possible zone_state values:

|| **Zone State** ||
|| configured ||
|| incomplete ||
|| installed ||
|| ready ||
|| running ||
|| shutting down ||


# VM Job Response Object

Any action called on the VMs or Metadata endpoints will result on a new Job being created on the backend. Performing an action on VM doens't imply that changes are going to be reflected immediately, so a Job response object will provide the user with the necessary info to get more details about progress of the task that has been queued. The user can poll the GET /jobs/<uuid> endpoint for more details and also GET /vms/<uuid> to see if the VM properties have changed after the job completes.

    {
      "vm_uuid": "ef375f03-57ca-44a9-bc8d-63aec09fbc37",
      "job_uuid": "6ad3a288-31cf-44e0-8d18-9b3f2a031067"
    }


# Error Response Object

Error responses will be returned when the response status code is one of 40X errors including 404. These responses will have an error code and a message:

    {
      "code": "ResourceNotFound",
      "message": "Route does not exist"
    }


# Ping VMAPI

Use ping when you want a general status report from VMAPI. VMAPI makes HTTP connections to REST APIs and TCP connections to services like redis and moray. In addition to service status, one might need to know when was the last time that VMAPI saw an incoming heartbeat when debugging VM data propagation errors. The **ping**  endpoint provides a compact response object that lets clients know what is VMAPI's point of view of the backend services it is connected to. The following is the format of the ping response object. The pingErrors attribute is an object where each of its keys is the name of an API (redis, wfapi, moray, cnapi or napi) and the value of each key is the error response that was obtained after pinging the correspondent service.

## Ping (GET /ping)

    GET /ping

    {
      "pid": 12456,
      "healthy": true,
      "services": {
        "redis": "online",
        "wfapi": "online",
        "moray": "online",
        "cnapi": "online",
        "napi": "online"
      },
      "pingErrors": {},
      "lastHeartbeatReceived": {
        "timestamp": "2012-11-22T00:27:49.851Z",
        "server": "564dcf02-3ed9-7459-bdfc-a2884558951f"
      },
      "lastHeartbeatProcessed": {
        "timestamp": "2012-11-22T00:26:59.402Z",
        "server": "564dcf02-3ed9-7459-bdfc-a2884558951f",
        "uuid": "32389211-62c7-4e29-a44c-b24ece8b3946"
      }
    }


# VMs

The Vms endpoint let us get information about VMs living on a SDC install, there is only one VMAPI instance per datacenter. VMAPI acts as an HTTP interface to VM data stored UFDS. VMAPI is used when need to obtain information about particular VMs or when we need perform actions on them such as start, reboot, resize, etc.

## ListVms (GET /vms)

Returns a list of VMs according the specified search filter.

### Inputs

All inputs are optional.

||**Param**||**Type**||**Description**||
||owner_uuid||UUID||VM Owner||
||server_uuid||UUID||Server where the VM lives||
||image_uuid||UUID||Image of the VM||
||billing_uuid||UUID||UUID of the package the VM was created with||
||brand||String|| Brand of the VM (joyent, joyent-minimal or kvm)||
||alias||String||VM Alias||
||state||String||running, stopped, active or destroyed||
||ram||Number||Amount of memory of the VM||
||package_name||String||Package name with which the VM was created||
||package_version||String||Package version with which the VM was created||
||tag.key||String||VM tags, see below||

## Tags

VMs can also be searched by tags. Tags are key/value pairs that let us identify a vm by client-specific criteria. If a VM is tagged as 'role=master', then the search filter to be added to the request params should be 'tag.role=master'. When a tag value is '*', the search is performed for VMs that are tagged with any value of the specified key. Any number of tags can be specified. See the examples section for sample searches of VMs by tags.

### Responses

||**Code**||**Description**||**Response**||
||200||||Array of VM objects||

### Examples

    GET /vms
    GET /vms?alias=my-vm
    GET /vms?state=running
    GET /vms?tag.role=sdc
    GET /vms?tag.role=sdc&tag.type=database
    GET /vms?tag.role=*


## ListVms With Search Query (GET /vms)

There is also an advanced feature in the VMs endpoint where you can execute an LDAP compatible search filter if you want a more precise object search. However you need to consider that the same rules regarding searchable attributes apply to this endpoint, so any search on an non-indexed column will
return an error. All the searchable attributes are listed in the Inputs table above for the ListVms endpoint. Additionally, there is a very special format you need to respect if you want to search VMs by tags. More on this below.

## Executing LDAP Search Queries

In order to execute a search query against the /vms endpoint, you need to pass a string parameter called query. The string must have the form of a valid LDAP search filter or else you will get an error. Here are some usage examples of this feature:

    GET /vms?query=(alias=adminui*)
    GET /vms?query=(ram>=1024)
    GET /vms?query=(%26(ram<=256)(alias=adminui*)
    GET /vms?query=(%26(ram=512)(alias=adminui0))

Note how the '&' character is escaped as '%26' since the query must be URL encoded. The only exception in the searchable attributes are tags. Since tags have a special format in the database, they have a different but straightforward format for the search filter. Below is an example of searching VMs with a specific tag by using a logical OR:

    GET /vms?query=(|(tags=*-smartdc_type=core-*)(ram>=1024))

As we can see, all we need to do is to enclose the key=value format of tag by the '\*-'' and '-\*'' characters. These are some examples of how to convert tags into a search expression for VMAPI:

|| **Tag Key** || **Tag Value** || **Tag String** || **Search Expression** ||
|| role || dns || role=dns || tags=\*-role=dns-\* ||
|| priority || high || priority=high || tags=\*-priority=high-\* ||
|| purpose || db || purpose=db || tags=\*-purpose=db-\* ||



## GetVm (GET /vms/:uuid)

Returns a VM with the specified UUID. When sync=true is passed, VMAPI will directly load VM details with a synchronous call to CNAPI. This will also refresh the VMs cache so that if a VM was already destroyed and it doesn't appear to be, it will be marked as such in the process. Using the sync version of this action can be seen as 'force VMAPI' to load the VM information directly from CNAPI.

### Inputs

||**Param**||**Type**||**Description**||**Required?**||
||uuid||UUID||VM UUID||Yes||
||owner_uuid||UUID||VM Owner||No||
||sync||Boolean||Load VM info from CNAPI||No||

### Responses

||**Code**||**Description**||**Response**||
||200||||VM object||
||404||VM not found||Error object||

### Example

    GET /vms/00956725-4689-4e2c-9d25-f2172f496f9c


## CreateVm (POST /vms)

Queues a VM provision. This will validate all parameters and create a new job on workflow API when the request is considered to be valid. The response is
the same as a GET to /vms/:uuid, however some VM attributes might not be present since it has not been provisioned yet. The response also contains a Job-Location header which can be used to get more information about the provisioning job that is being executed by workflow API.

### General Required Inputs

||**Param**||**Type**||**Description**||
||owner_uuid||UUID||VM Owner||
||networks*||Array*||List of networks||
||brand||String||'joyent', 'joyent-minimal' or 'kvm'||
||ram||Number||VM RAM||

### Required Inputs for OS VMs

||**Param**||**Type**||**Description**||
||image_uuid||UUID||Image UUID||

### Required Inputs for KVM VMs

||**Param**||**Type**||**Description**||
||disks||Array||Disks definition for the KVM VM, see below||

KVM VMs need a list of disks as an additional parameter. For more specific information on the full format that a disk object can take please refer to vmadm(1). In the case of VMAPI, there are only two conditions that need to be met for a valid disks list:

* The first disk MUST have a 'image_uuid' property. This is required because the first disk of the VM is the disk where the OS gets installed
* The second and following disks in the list MUST have a 'size' property. This is mandatory for any disk that is not the image disk of the VM

The following is a simple example of a valid disks list passed to VMAPI for a KVM VM provision:

    "disks": [
      {"image_uuid": "56108678-1183-11e1-83c3-ff3185a5b47f"},
      {"size": 10240}
    ]

Additional information that the first disk of the VM needs before the provision is queued is obtained from the Image specified with image_uuid.

### Deprecation Note

The CreateVm endpoint accepts a list of network UUIDs in its legacy interface. A list of such UUID strings can be an object like the following:

    [
      '72a9cd7d-2a0d-4f45-8fa5-f092a3654ce2',
      '01b2c898-945f-11e1-a523-af1afbe22822
    ]

The 'networks' parameter format has been updated to support the case when a specific IP wanted on the given network is provided. The following is the new format for the networks parameter:

    [
      { uuid: '72a9cd7d-2a0d-4f45-8fa5-f092a3654ce2', ip: '10.99.99.11' },
      { uuid: '01b2c898-945f-11e1-a523-af1afbe22822 }
    ]

As we can see, the first element in the array is specifying an IP address that needs to be allocated whereas the second element it's just the regular case when IP allocation is left to NAPI.


### General Optional Inputs

||**Param**||**Type**||**Description**||
||server_uuid||UUID||Manually specify a server for the provision||
||alias||String||VM alias||
||max_physical_memory||Number||Same as RAM||
||max_swap||Number||Defaults to 2 x RAM if not specified||
||zfs_io_priority||Number||ZFS IO Priority||
||cpu_cap||Number||CPU Cap||
||max_lwps||Number||Max. Lightweight Processes||
||quota||Number||VM quota||
||tags||Object||VM tags||
||customer_metadata||Object||VM metadata||
||internal_metadata||Object||VM metadata||

### Optional Inputs for OS VMs

||**Param**||**Type**||**Description**||
||filesystems||Array||Additional filesystems for the OS VM||

### Optional Inputs for KVM VMs

||**Param**||**Type**||**Description**||
||cpu_type||String||One of qemu64, host||
||vcpus||Number||Number of virtual CPUs for the guest||
||disk_driver||String||One of virtio, ide, scsi||
||nic_driver||String||One of virtio, e1000, rtl8139||


### Response Codes

||**Code**||**Description**||**Response**||
||202||New job created||VM response object||
||409||Missing parameter||Error object||
||409||Invalid parameter||Error object||

### Example: creating a OS VM

    POST /vms -d '{
      "owner_uuid": "930896af-bf8c-48d4-885c-6573a94b1853",
      "image_uuid": "28445220-6eac-11e1-9ce8-5f14ed22e782",
      "brand": "joyent",
      "networks": "a4457fc9-c415-4ac9-8738-a03b1a8e7aee",
      "ram": 128
    }'

### Example: creating a KVM VM

Note how image_uuid is specified for the first disk and not at the top level of the payload

    POST /vms -d '{
      "owner_uuid": "930896af-bf8c-48d4-885c-6573a94b1853",
      "brand": "kvm",
      "ram": 256,
      "disks": [
        {"image_uuid": "56108678-1183-11e1-83c3-ff3185a5b47f"},
        {"size": 10240}
      ]
    }'


## UpdateVm (POST /vms/:uuid)

Queues an update operation on a VM. The folowing operations are supported: **start, stop, reboot, update, add_nics, remove_nics, create_snapshot, delete_snapshot and rollback_snapshot**. Each of these operations is documented below.

### UpdateVM General Inputs

||**Param**||**Type**||**Description**||**Required?**||
||uuid||UUID||VM UUID||Yes||
||owner_uuid||UUID||VM Owner||No||
||action||String||start, stop, reboot, update, add_nics, remove_nics, create_snapshot, delete_snapshot, rollback_snapshot||Yes||

### UpdateVm Response Codes

||**Code**||**Description**||**Response**||
||202||New job created||VM response object||
||404||VM not found||Error object||
||409||Missing parameter||Error object||
||409||Invalid parameter||Error object||

## VM Action: Start Inputs (POST /vms/:uuid?action=start)

No additional inputs are needed for this action.

### Example

    POST /vms/e9bd0ed1-7de3-4c66-a649-d675dbce6e83?action=start

## VM Action: Stop Inputs (POST /vms/:uuid?action=stop)

No additional inputs are needed for this action.

### Example

    POST /vms/e9bd0ed1-7de3-4c66-a649-d675dbce6e83?action=stop

## VM Action: Reboot Inputs (POST /vms/:uuid?action=reboot)

No additional inputs are needed for this action.

### Example

    POST /vms/e9bd0ed1-7de3-4c66-a649-d675dbce6e83?action=reboot

## VM Action: Update Inputs (POST /vms/:uuid?action=update)

At least one of the following parameters must be provided when action=update.

||**Param**||**Type**||**Description**||
||alias||String||VM alias||
||new_owner_uuid||UUID||UUID of the new VM Owner||
||ram||Number||VM RAM||
||max_physical_memory||Number||Same as RAM||
||max_swap||Number||Defaults to 2 x RAM if not specified||
||zfs_io_priority||Number||ZFS IO Priority||
||cpu_cap||Number||CPU Cap||
||max_lwps||Number||Max. Lightweight Processes||
||quota||Number||VM quota (disk)||
||tags||Object||VM tags||
||customer_metadata||Object||VM metadata||
||internal_metadata||Object||VM metadata||

### Example with a JSON payload

    POST /vms/e9bd0ed1-7de3-4c66-a649-d675dbce6e83?action=update -d '{
      "alias": "new-alias",
      "quota": 20
    }'

### Example with form parameters

    POST /vms/e9bd0ed1-7de3-4c66-a649-d675dbce6e83?action=update \
      -d alias=new-alias \
      -d quota=20


## VM Action: Add Nics Inputs (POST /vms/:uuid?action=add_nics)

For adding NICs to a VM, a networks list parameter must be specified.

||**Param**||**Type**||**Description**||
||networks*||Array*||List of networks. Same format as CreateVm||

### Example with a JSON payload

    POST /vms/e9bd0ed1-7de3-4c66-a649-d675dbce6e83?action=add_nics -d '{
      "networks": [ { "uuid": "564ded48-c31d-5029-472a-98d5aa9e5a38" } ]
    }'

### Example with form parameters

    POST /vms/e9bd0ed1-7de3-4c66-a649-d675dbce6e83?action=add_nics \
      -d networks=564ded48-c31d-5029-472a-98d5aa9e5a38 \


## VM Action: Remove Nics Inputs (POST /vms/:uuid?action=remove_nics)

For removing NICs from a VM, a macs list parameter must be specified. This parameter can be an array of MAC addresses or a comma separated string of MAC addresses.

||**Param**||**Type**||**Description**||
||macs||Array||List of MAC addresses||

### Example with a JSON payload

    POST /vms/e9bd0ed1-7de3-4c66-a649-d675dbce6e83?action=remove_nics -d '{
      "macs": [ "90:b8:d0:d9:f0:83" ]
    }'

### Example with form parameters

    POST /vms/e9bd0ed1-7de3-4c66-a649-d675dbce6e83?action=remove_nics \
      -d macs=90:b8:d0:d9:f0:83 \


## VM Action: Create Snapshot Inputs (POST /vms/:uuid?action=create_snapshot)

If a name for the snapshot is not specified, VMAPI will generate a timestamp for its name with the UTC ISO date/time format (without colons or dashes):

    YYYYMMDDTHHMMSSZ

    Example:

    20121018T222506Z

||**Param**||**Type**||**Description**||
||snapshot_name||String||Snapshot name or generated timestamp if not present||

### Example with a JSON payload

    POST /vms/e9bd0ed1-7de3-4c66-a649-d675dbce6e83?action=create_snapshot -d \
    '{ "snapshot_name": "foobar" }'

### Example with form parameters

    POST /vms/e9bd0ed1-7de3-4c66-a649-d675dbce6e83?action=create_snapshot \
      -d snapshot_name=foobar


## VM Action: Delete Snapshot Inputs (POST /vms/:uuid?action=delete_snapshot)

||**Param**||**Type**||**Description**||
||snapshot_name||String||Snapshot name||

### Example with a JSON payload

    POST /vms/e9bd0ed1-7de3-4c66-a649-d675dbce6e83?action=delete_snapshot -d \
    '{ "snapshot_name": "foobar" }'

### Example with form parameters

    POST /vms/e9bd0ed1-7de3-4c66-a649-d675dbce6e83?action=delete_snapshot \
      -d snapshot_name=foobar


## VM Action: Rollback Snapshot Inputs (POST /vms/:uuid?action=rollback_snapshot)

If the VM is running at the moment of the request, it will be
shutdown before executing the rollback and be booted again after the rollback
has succeeded.

||**Param**||**Type**||**Description**||
||snapshot_name||String||Snapshot name||

### Example with a JSON payload

    POST /vms/e9bd0ed1-7de3-4c66-a649-d675dbce6e83?action=rollback_snapshot -d \
    '{ "snapshot_name": "foobar" }'

### Example with form parameters

    POST /vms/e9bd0ed1-7de3-4c66-a649-d675dbce6e83?action=rollback_snapshot \
      -d snapshot_name=foobar



## DeleteVm (DELETE /vms/:uuid)

Deletes a VM. The VM will be physically destroyed and it will be marked as destroyed on UFDS when the operation is completed. When sync=true is passed, VMAPI will wait on the workflow API's job to complete before returning and the zone will be marked as destroyed in the process. This is an experimental feature for clients that need to wait until the DELETE has actually destroyed the VM physically before continuing.

### Inputs

||**Param**||**Type**||**Description**||**Required?**||
||uuid||UUID||VM UUID||Yes||
||owner_uuid||UUID||VM Owner||No||
||sync||Boolean||Sync delete||No||

### Responses

||**Code**||**Description**||**Response**||
||202||New job created||VM response object||
||404||VM not found||Error object||
||409||VM not allocated to a server yet||Error object||


### Example

    DELETE /vms/e9bd0ed1-7de3-4c66-a649-d675dbce6e83


# VM Metadata

There are three kinds of metadata a VM can store: customer_metadata, internal_metadata and tags. A metadata object is any valid set of key/value pairs that can be properly encoded to JSON. Values must be strings, numbers or booleans. Examples:

    {
      "ip": "10.99.99.9",
      "boolean": true,
      "string": "foobar",
      "number": 42
    }

VM Tags allow VMs to be grouped by any criteria. Tags are key/value pairs that can be assigned to any VM. For example, VMs can be grouped by tagging them as a database role with a tag such as '{ role: "database" }'.

Customer and internal metadata are used to store relevant information to the VM, such as IP addresses of dependent VMs or initialization scripts that run when the VM is being setup.

The following API endpoints are equivalent for tags, customer_metadata and internal_metadata since all three metadata types share the same representation.


## ListMetadata (GET /vms/:uuid/(tags|customer_metadata|internal_metadata))

Returns metadata assigned to a VM.

### Inputs

||**Param**||**Type**||**Description**||**Required?**||
||uuid||UUID||VM UUID||Yes||
||owner_uuid||UUID||VM Owner||No||

### Responses

||**Code**||**Description**||**Response**||
||200||||Metadata object||
||404||VM not found||Error object||

### Example

    GET /vms/da0dfac1-341e-4e51-b357-99f7355f1008/tags

    {
      "role": "dns",
      "customer": "tracy"
    }


## GetMetadata (GET /vms/:uuid/(tags|customer_metadata|internal_metadata)/:key)

Returns the value of a metadata key.

### Inputs

||**Param**||**Type**||**Description**||**Required?**||
||uuid||UUID||VM UUID||Yes||
||owner_uuid||UUID||VM Owner||No||
||key||String||Metadata Key||Yes||

### Responses

||**Code**||**Description**||**Response**||
||200||||String value of the metadata key||
||404||VM not found||Error object||

### Example

    GET /vms/da0dfac1-341e-4e51-b357-99f7355f1008/tags/role

    dns


## AddMetadata (POST /vms/:uuid/(tags|customer_metadata|internal_metadata))

Adds a new metadata to a VM. Keep in mind that metadata gets appended, not overwritten.

### Inputs

||**Param**||**Type**||**Description**||**Required?**||
||uuid||UUID||VM UUID||Yes||
||owner_uuid||UUID||VM Owner||No||
||metadata||key-value/object||Metadata||Yes||

### Responses

||**Code**||**Description**||**Response**||
||202||New job created||VM response object||
||404||VM not found||Error object||

### Example

    POST /vms/da0dfac1-341e-4e51-b357-99f7355f1008/tags
      -d customer=tracy
    POST /vms/da0dfac1-341e-4e51-b357-99f7355f1008/tags
      --data-binary '{ "customer": "tracy" }'


## SetMetadata (PUT /vms/:uuid/(tags|customer_metadata|internal_metadata))

Sets new metadata to a VM. The provided metadata object replaces the current
one present in the VM.

### Inputs

||**Param**||**Type**||**Description**||**Required?**||
||uuid||UUID||VM UUID||Yes||
||owner_uuid||UUID||VM Owner||No||
||metadata||key-value/object||Metadata||Yes||

### Responses

||**Code**||**Description**||**Response**||
||202||New job created||VM response object||
||404||VM not found||Error object||

### Example

    POST /vms/da0dfac1-341e-4e51-b357-99f7355f1008/tags
      -d customer=tracy
    POST /vms/da0dfac1-341e-4e51-b357-99f7355f1008/tags
      --data-binary '{ "customer": "tracy" }'


## DeleteMetadata (DELETE /vms/:uuid/(tags|customer_metadata|internal_metadata)/:key)

Deletes a metadata key from a VM.

### Inputs

||**Param**||**Type**||**Description**||**Required?**||
||uuid||UUID||VM UUID||Yes||
||owner_uuid||UUID||VM Owner||No||
||key||String||Metadata Key||Yes||

### Responses

||**Code**||**Description**||**Response**||
||202||New job created||VM response object||
||404||VM not found||Error object||

### Example

    DELETE /vms/da0dfac1-341e-4e51-b357-99f7355f1008/tags/role


## DeleteAllMetadata (DELETE /vms/:uuid/(tags|customer_metadata|internal_metadata))

Deletes all metadata keys from a VM.

### Inputs

||**Param**||**Type**||**Description**||**Required?**||
||uuid||UUID||VM UUID||Yes||
||owner_uuid||UUID||VM Owner||No||

### Responses

||**Code**||**Description**||**Response**||
||202||New job created||VM response object||
||404||VM not found||Error object||

### Example

    DELETE /vms/da0dfac1-341e-4e51-b357-99f7355f1008/tags


# Jobs

Jobs are created when an operation needs to be performed on a VM. Examples of jobs that can be created are VM lifecycle tasks such as start and reboot. Provision jobs are created from calling "POST /vms".


## ListJobs (GET /jobs)

Returns all jobs matching the specified search filters.

### Inputs

|| **Param** || **Type** || **Description** || **Required?** ||
|| vm_uuid || UUID || Return all jobs for this VM UUID || No ||
|| execution || String || Job state. See below || No ||
|| task || String || Type of job. See below || No ||

### Job 'execution' State Inputs

|| **Execution** ||
|| running ||
|| succeeded ||
|| failed ||

### Job 'task' Type Inputs

**NOTE** Any metadata endpoint that returns a Job response object is an 'update'
job for the backend system.

|| **Task** ||
|| provision ||
|| start ||
|| stop ||
|| reboot ||
|| update ||

### Example

    GET /jobs?execution=failed
    GET /jobs?task=provision


## ListVmJobs (GET /vms/:uuid/jobs)

Returns all VM jobs matching the specified search filters. This is the same
implementation as the previous endpoint, but with a more convenient path when
the VM UUID is known.

### Inputs

|| **Param** || **Type** || **Description** || **Required?** ||
|| uuid || UUID || Return all jobs for this VM UUID || No ||
|| execution || String || Job state. See above || No ||
|| task || String || Type of job. See above || No ||

### Example

    GET /vms/da0dfac1-341e-4e51-b357-99f7355f1008/jobs?execution=failed
    GET /vms/da0dfac1-341e-4e51-b357-99f7355f1008/jobs?task=provision


## GetJob (GET /jobs/:uuid)

Returns a job with the specified UUID.

### Inputs

||**Param**||**Type**||**Description**||**Required?**||
||uuid||UUID||Job UUID||Yes||

### Example

    GET /jobs/6ad3a288-31cf-44e0-8d18-9b3f2a031067

    {
      "name": "provision-4e4ff04b-5cc4-437e-92da-2403a634e74f",
      "uuid": "6ad3a288-31cf-44e0-8d18-9b3f2a031067",
      "execution": "succeeded",
      "params": {
        "owner_uuid": "930896af-bf8c-48d4-885c-6573a94b1853",
        "image_uuid": "28445220-6eac-11e1-9ce8-5f14ed22e782",
        "brand": "joyent",
        "ram": "128",
        "zonename": "e9bd0ed1-7de3-4c66-a649-d675dbce6e83",
        "uuid": "e9bd0ed1-7de3-4c66-a649-d675dbce6e83",
        "server_uuid": "564da914-5047-48f0-ba5e-26761097330a",
        "task": {
          "id": "70129767",
          "progress": 100,
          "status": "complete"
        }
      },
      "exec_after": "2012-04-13T18:17:15.194Z",
      "created_at": "2012-04-13T18:17:15.198Z",
      "timeout": 180,
      "chain_results": [
        {
          "result": "All parameters OK!",
          "error": "",
          "started_at": "2012-04-13T18:17:17.512Z",
          "finished_at": "2012-04-13T18:17:18.619Z"
        },
        {
          "result": "Got servers!",
          "error": "",
          "started_at": "2012-04-13T18:17:18.628Z",
          "finished_at": "2012-04-13T18:17:21.737Z"
        },
        {
          "result": "Server allocated!",
          "error": "",
          "started_at": "2012-04-13T18:17:21.743Z",
          "finished_at": "2012-04-13T18:17:23.137Z"
        },
        {
          "result": "Provision succeeded!",
          "error": "",
          "started_at": "2012-04-13T18:17:23.197Z",
          "finished_at": "2012-04-13T18:18:42.726Z"
        }
      ]
    }


# Running Status for VMs

When querying one of the VM endpoints such as the single and collection VM URLs, the 'state' attribute of the VM object let us know what is the running status of the machine. In addition to this, a '/statuses' endpoint is provided to give information about specific VM UUIDs instead of returning VM objects for machines that satisfy a search criteria.

## ListStatuses (GET /statuses)

Returns the running status for all of the VM UUIDs specified in the request parameters.

### Inputs

|| **Param** || **Type** || **Description** || **Required?** ||
|| uuids || Array of UUIDs || Comma separated list of UUIDs || Yes ||

### Note

When one of the UUIDs in the request parameters corresponds to a machine that does not exist, it is ignored in the response object instead of returning null.

### Example

    GET /statuses?uuids=54e21a72-5921-4c5a-92db-fb662c8a812a,4f11fbab-dcc0-483f-bb14-e1434465032a

    {
      "54e21a72-5921-4c5a-92db-fb662c8a812a": "running",
      "4f11fbab-dcc0-483f-bb14-e1434465032a": "stopped"
    }




# Changelog

## 2013-02-04

  * Added process *pid* to /ping response

## 2012-12-18

  * Added support for delete_snapshot
  * Updated endpoints for create_snapshot and rollback_snapshot. They are now part of UpdateVm

## 2012-12-13

  * Added support add_nics and remove_nics on UpdateVm

## 2012-11-30

  * Added support for advanced search on ListVms (LDAP search filters)

## 2012-11-21

  * New /ping endpoint to report on service status

## 2012-11-19

  * VM response object now returns the snapshot property for vms

## 2012-11-08

  * updateVm endpoint now takes new_owner_uuid instead of owner_uuid to indicate the new owner of the VM

## 2012-10-18

  * Added snapshot and rollback support

## 2012-09-11

  * Updating VM metadata with an updateVm operation replaces existing metadata. It is no longer an append

## 2012-08-29

  * Adds an error response when trying to delete unallocated VMs

## 2012-08-10

  * Added new format for networks parameter in CreateVm. See deprecation note

## 2012-08-08

  * Added /statuses

## 2012-06-12

  * Added /jobs and /vms/:uuid/jobs

## 2012-06-11

  * dataset_uuid is deprecated. image_uuid should now be used
  * Added SetMetadata (PUT /vms/:uuid/:metadata)

## 2012-06-07

  * Reverted dataset_url as a allowed parameter
  * Can now pass nics as a parameter. Will override networks

## 2012-06-06

  * Brand 'joyent-minimal' is now supported

## 2012-06-05

  * When creating a new VM you can now pass dataset_url
  * When creating a new VM you can now pass server_uuid

## 2012-06-04

  * VM actions now return a Job Response Object

## 2012-06-01

  * VM API endpoints are now named /vms instead of /machines
  * /machines is still aliased but deprecated

## 2012-05-28

  * Search VMs by tags

## 2012-05-23

  * 'networks' is a required parameter for POST /vms
  * Add sync=true parameter to GET /vms/uuid

## 2012-05-22

  * Add sync=true parameter to DELETE /vms/uuid