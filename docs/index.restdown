---
title: Zones API (ZAPI)
apisections: Machines, Machine Tags
markdown2extras: wiki-tables, code-friendly
---

# ZAPI

* Repository: git clone git@git.joyent.com:zapi.git
* Browsing: <https://mo.joyent.com/zapi>
* Docs: <https://mo.joyent.com/docs/zapi>
* Who: Andres Rodriguez
* Tickets/bugs: <https://devhub.joyent.com/jira/browse/ZAPI>

# Introduction to Zones API

## What is ZAPI?

Zones API allows clients to get information about machines on a datacenter by using an HTTP API. ZAPI offers the following features:

 * Search machines by specific criteria such as ram, owner, tags, server, dataset, etc.
 * Get information about a single machine
 * Create new machines
 * Perform actions on an existing machine such as start, stop, reboot and resize
 * Update machines
 * Destroy machines

## Design & Requirements

* Node.js restify HTTP server
* UFDS is the remote datastore for ZAPI. ZAPI does not have persistency and all zones data living on UFDS should be considered a cache
* A heartbeater AMQP client listens for zone heartbeats so ZAPI can return status information for zones
* ZAPI is only concerned for exposing zones information to users the same way CNAPI does for compute nodes
* There is one ZAPI instance per datacenter
* ZAPI is stateless: when any machine action is called (create, destroy, reboot, etc) the message is passed through a workflow API instance that takes care of it
* ZAPI should be as dumb as possible. Contrary to MAPI, ZAPI does not have complicated logic that prevents users to call actions on zones (and even creating zones). Much of the required logic for this is moved to the corresponding workflow and other participant APIs


# Getting Started

You can set your own local install of ZAPI assuming you are also running a local (or remote if accessible) COAL instance with the master branch of UFDS:

    # Get the source and build.
    git clone git@git.joyent.com:zapi.git
    cd zapi/
    make all

    # Setup config.
    # Note that there is a dependency on a headnode instance with a running UFDS
    cp config.mac.json config.json
    vi config.json

    # node server.js


# Machines

The Machines endpoint let us get information about machines living on a SDC install, there is only one ZAPI instance per datacenter. ZAPI acts as an HTTP interface to machine data stored UFDS. ZAPI is used when need to obtain information about particular machines or when we need perform actions on them such as start, reboot, resize, etc.

## ListMachines (GET /machines)

Returns a list of machines according the specified search filter.

### Inputs

||owner_uuid||UUID||Machine Owner||
||type||String||'vm' or 'zone'||
||alias||String||Machine Alias||
||status||String||'running' or 'off'||
||ram||Number||Amount of memory of the machine||


## GetMachine (GET /machines/:uuid)

Returns a machine with the specified UUID.

### Inputs

||uuid||UUID||Machine UUID||
||owner_uuid||UUID||Machine Owner||


## UpdateMachine (POST /machines/:uuid)

Queues an update operation on a machine. Only four operations are supported at this moment: start, stop, reboot and resize. Resize is the only action that takes arguments. These actions are not currently implemented in the backend, so they will return "202 Accepted" when called.

### Inputs

||uuid||UUID||Machine UUID||
||owner_uuid||UUID||Machine Owner||
||action||String||start, stop, reboot or resize||


# Machine Tags

Machine Tags allow machines to be grouped by any criteria. Tags are key/value pairs that can be assigned to any machine. For example, machines can be grouped by tagging them as a database role with a tag such as '{ role: "database" }'.

## ListMachines (GET /machines/:uuid/tags)

Returns a list of tags assigned to machine.

### Inputs

||uuid||UUID||Machine UUID||
||owner_uuid||UUID||Machine Owner||


## GetTag (GET /machines/:uuid/tags/:key)

Returns a machine tag.

### Inputs

||uuid||UUID||Machine UUID||
||owner_uuid||UUID||Machine Owner||
||key||String||Tag Key||


## AddTags (POST /machines/:uuid/tags)

Adds a new tag to a machine.

### Inputs

||uuid||UUID||Machine UUID||
||owner_uuid||UUID||Machine Owner||
||key||String||Tag Key||


## DeleteTag (DELETE /machines/:uuid/tags/:key)

Deletes a tag from a machine.

### Inputs

||uuid||UUID||Machine UUID||
||owner_uuid||UUID||Machine Owner||
||key||String||Tag Key||


## DeleteTags (DELETE /machines/:uuid/tags)

Deletes all tags from a machine.

### Inputs

||uuid||UUID||Machine UUID||
||owner_uuid||UUID||Machine Owner||
